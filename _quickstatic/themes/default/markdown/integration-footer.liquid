{.hidden #express_btn_content}
:::::

### ExpressJS

Here's how to quickly integrate APItoolkit into your Express.js application.

#### Installation

``` bash
npm install apitoolkit-express
```

#### Integrate

```js
import express from "express";
import { APIToolkit } from "apitoolkit-express";
const app = express();
const apitoolkitClient = APIToolkit.NewClient({ apiKey: "{YOUR_API_KEY_HERE}" });

app.use(apitoolkitClient.expressMiddleware)
// All controllers should live here
app.get("/", (req, res) => {
});
// ...
// The error handler must be before any other error middleware
// and after all controllers
app.use(apitoolkitClient.errorHandler)

```

⏭️: Read the [ExpressJS SDK guide](/docs/sdks/nodejs/expressjs) to learn more.

:::::

{.hidden #phoenix_btn_content}
:::::

### Elixir Phoenix

Here's how to quickly integrate APItoolkit into your Elixir application.

#### Installation

``` bash
{:apitoolkit_phoenix, "~> 0.1.1"}
```

#### Integrate

``` js
// route.ex file
defmodule HelloWeb.Router do
import ApitoolkitPhoenix

pipeline :api do
plug ApitoolkitPhoenix,
config: %{
api_key: "{YOUR_API_KEY_HERE}",
}
end

// Automatic error handling
@impl Plug.ErrorHandler
def handle_errors(conn, err) do
conn = report_error(conn, err)
json(conn, %{message: "Something went wrong"})
end
end
```
⏭️: Read the [Phoenix SDK guide](/docs/sdks/elixir/phoenix) to learn more.

:::::


{.hidden #laravel_btn_content}
:::::

### PHP Laravel

Here's how to quickly integrate APItoolkit into your Laravel application.

#### Installation

``` bash
composer require apitoolkit/apitoolkit-laravel
```

#### Integrate

First, set the `APITOOLKIT_KEY` environment variable to your `.env` file.

```bash
APITOOLKIT_KEY=xxxxxx-xxxxx-xxxxxx-xxxxxx-xxxxxx
```
Next, register the middleware in your `app/Http/Kernel.php` file.

``` php
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
  protected $middlewareGroups = [
    'api' => [
    \APIToolkit\Http\Middleware\APIToolkit::class,
    ],
  ];
}
```

⏭️: Read the [Laravel SDK guide](/docs/sdks/php/laravel) to learn more.

:::::

{.hidden #net_btn_content}
:::::

### .NET Core

Here's how to quickly integrate APItoolkit into your .NET application.

#### Installation 

``` bash
dotnet add package ApiToolkit.Net
```

#### Integrate

``` .NET 
var config = new Config
{
    Debug = true, # Set debug flags to false in production
    ApiKey = "{YOUR_API_KEY_HERE}"
};
var client = await APIToolkit.NewClientAsync(config);
# Register the middleware to use the initialized client
app.Use(async (context, next) =>
{
    var apiToolkit = new APIToolkit(next, client);
    await apiToolkit.InvokeAsync(context);
});
```

⏭️: Read the [.Net Core SDK guide](/docs/sdks/dotnet/dotnetcore) to learn more.

:::::

{.hidden #django_btn_content}
:::::

### Django 

Here's how to quickly integrate APItoolkit into your Django application.

#### Installation 

``` bash
pip install apitoolkit-django
```

#### Integrate

``` .NET 
MIDDLEWARE = [
    ...,
    'apitoolkit_django.APIToolkit',
    ...,
]
var config = new Config
{
    Debug = true, # Set debug flags to false in production
    ApiKey = "{YOUR_API_KEY_HERE}"
};
```

⏭️: Read the [Django SDK guide](/docs/sdks/python/django) to learn more.

:::::

{.hidden #go_btn_content}
:::::

### Golang Native

Here's how to quickly integrate APItoolkit into your native Golang application.

#### Installation

``` bash
go get -u github.com/apitoolkit/apitoolkit-go
```

#### Integrate

```go
package main

import (
"net/http"
"context"
apitoolkit "github.com/apitoolkit/apitoolkit-go"
)

func main() {
// Initialize APIToolkit client with your generated API key
ctx := context.Background()
apitoolkitClient, err := apitoolkit.NewClient(ctx, apitoolkit.Config{APIKey: "{YOUR_API_KEY_HERE}"})
if err != nil {
panic(err)
}

http.Handle("/", apitoolkitClient.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
w.Write([]byte("Hello, World!"))
})))
http.ListenAndServe(":8080", nil)
}
```

⏭️: Read the [Go Native SDK guide](/docs/sdks/golang/native) to learn more.

:::::

{.hidden #fast_btn_content}
:::::

### FastAPI 

Here's how to quickly integrate APItoolkit into your FastAPI application.

#### Installation 

``` bash
pip install apitoolkit-fastapi
```

#### Integrate

```py 
from fastapi import FastAPI
from apitoolkit_fastapi import APIToolkit

app = FastAPI()

apitoolkit = APIToolkit(api_key="{YOUR_API_KEY_HERE}")

app.middleware('http')(apitoolkit.middleware)
```

⏭️: Read the [FastAPI SDK guide](/docs/sdks/python/fastapi) to learn more.

:::::

{.hidden #symfony_btn_content}
:::::

### PHP Symfony

Here's how to quickly integrate APItoolkit into your Symfony PHP application.

#### Installation

``` bash
composer require apitoolkit/apitoolkit-symfony
```

#### Integrate

First, set the `APITOOLKIT_KEY` environment variable in your `.env` file.

``` bash
APITOOLKIT_KEY=xxxxxx-xxxxx-xxxxxx-xxxxxx-xxxxxx
```

Next, register the service in your `services.yaml` file.

```yaml
services:
APIToolkit\EventSubscriber\APIToolkitService:
arguments:
$apiKey: '%env(APITOOLKIT_KEY)%'
# Optional: if you want to cache login result add this cache poll instance via setter injection
calls:
- setCachePool: ['@PutYourCachePoolServiceHere']
tags:
- { name: 'kernel.event_subscriber' }

```

⏭️: Read the [Symfony SDK guide](/docs/sdks/php/symfony) to learn more.

:::::

{.hidden #flask_btn_content}
:::::

### Flask 

Here's how to quickly integrate APItoolkit into your Flask application.

#### Installation 

``` bash
pip install apitoolkit-flask
```

#### Integrate

```py
from flask import Flask
from apitoolkit_flask import APIToolkit

app = Flask(__name__)

apitoolkit = APIToolkit(api_key="{YOUR_API_KEY_HERE}", debug=True)

@app.before_request
def before_request():
  apitoolkit.beforeRequest()

@app.after_request
def after_request(response):
  apitoolkit.afterRequest(response)
  return response
```

⏭️: Read the [Flask SDK guide](/docs/sdks/python/flask) to learn more.

:::::

{.hidden #gin_btn_content}
:::::

### Golang Gin 

Here's how to quickly integrate APItoolkit into your Gin application.

#### Installation 

``` bash
go get github.com/apitoolkit/apitoolkit-go
```

#### Integrate

``` go
package main

import (
"context"
apitoolkit "github.com/apitoolkit/apitoolkit-go"
"github.com/gin-gonic/gin"
)

func main() {

    // Initialize the client using your apitoolkit.io generated apikey
    apitoolkitClient, err := apitoolkit.NewClient(context.Background(), apitoolkit.Config{APIKey: "{YOUR_API_KEY_HERE}"})
    if err != nil {
    	panic(err)
    }

    router := gin.New()

    // Register with the corresponding middleware of your choice. For Gin router, we use the GinMiddleware method.
    router.Use(apitoolkitClient.GinMiddleware)

}
```

⏭️: Read the [Go Gin SDK guide](/docs/sdks/golang/gin) to learn more.

:::::

{.hidden #adonis_btn_content}
:::::

### AdonisJS

Here's how to quickly integrate APItoolkit into your AdonisJS application.

#### Installation 

``` bash
npm install apitoolkit-adonis
```

#### Integrate

First, configure the package.

``` bash
node ace configure apitoolkit-adonis
```

Next, set API key in a `/conf/apitoolkit.ts` file.

``` js
export const apitoolkitConfig = {
apiKey: "",
};
```

Then, add `@ioc:APIToolkit` to your global middlewares in the `start/kernel.ts` file.

``` js
Server.middleware.register([
  () => import("@ioc:Adonis/Core/BodyParser"),
  () => import("@ioc:APIToolkit"),
]);
```

⏭️: Read the [AdonisJS SDK guide](/docs/sdks/nodejs/adonisjs) to learn more.

:::::

{.hidden #fastify_btn_content}
:::::

###  Fastify

Here's how to quickly integrate APItoolkit into your Fastify.js application.

#### Installation 

``` bash
npm install apitoolkit-fastify
```

#### Integrate

``` js
import APIToolkit from "apitoolkit-fastify";
import Fastify from "fastify";

const fastify = Fastify();

// Create and initialize an instance of the APIToolkit
const apittoolkitClient = APIToolkit.NewClient({
  apiKey: "{YOUR_API_KEY_HERE}",
  fastify,
});
apitoolkitClient.init();
```

⏭️: Read the [Fastify SDK guide](/docs/sdks/nodejs/fastifyjs) to learn more.

:::::

{.hidden #nestjs_btn_content}
:::::

###  NestJS 

Here's how to quickly integrate APItoolkit into your Nest.js application.

#### Installation 

``` bash
npm install apitoolkit-express
```

#### Integrate

``` js
import { NestFactory } from "@nestjs/core";
import { APIToolkit } from "apitoolkit-express";
import { AppModule } from "./app.module";
//
async function bootstrap() {
  const apiToolkitClient = APIToolkit.NewClient({
    apikey: "{YOUR_API_KEY_HERE}",
  });
  const app = await NestFactory.create(AppModule);
  app.use(apiToolkitClient.expressMiddleware);
  await app.listen(3000);
}
//
bootstrap();
```

⏭️: Read the [NestJS SDK guide](/docs/sdks/nodejs/nestjs) to learn more.

:::::

{.hidden #mux_btn_content}
:::::

###  Golang Gorilla Mux

Here's how to quickly integrate APItoolkit into your Golang Gorilla Mux application.

#### Installation 

``` bash
go get -u github.com/gorilla/mux
```

#### Integrate

``` go
package main

import (
  "context"
  "net/http"
  "github.com/gorilla/mux"
  apitoolkit "github.com/apitoolkit/apitoolkit-go"
)

func main() {
  ctx := context.Background()
  // Initialize the client using your generated apikey
  apitoolkitClient, err := apitoolkit.NewClient(ctx, apitoolkit.Config{APIKey: "{YOUR_API_KEY_HERE}"})
  if err != nil {
    panic(err)
  }

  r := mux.NewRouter()
  // Register middleware
  r.Use(apitoolkitClient.GorillaMuxMiddleware)
}
```

⏭️: Read the [Go Gorilla Mux SDK guide](/docs/sdks/golang/gorillamux) to learn more.

:::::

{.hidden #pyramid_btn_content}
:::::

### Pyramid

Here's how to quickly integrate APItoolkit into your Pyramid application.

#### Installation

``` bash
pip install apitoolkit-pyramid
```

#### Integrate

```py
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response
from pyramid.view import view_config

@view_config(
route_name='home'
)
def home(request):
return Response('Welcome!')

if __name__ == '__main__':
setting = {"APITOOLKIT_KEY": "{YOUR_API_KEY_HERE}"}
with Configurator(settings=setting) as config:
# Add APItoolkit tween
config.add_tween("apitoolkit_pyramid.APIToolkit")
config.add_route('home', '/')
config.scan()
app = config.make_wsgi_app()
server = make_server('0.0.0.0', 6543, app)
server.serve_forever()
```

⏭️: Read the [Pyramid SDK guide](/docs/sdks/python/pyramid) to learn more.

:::::

``` =html
<div class="flex flex-col md:flex-row sm:space-x-8 mt-8">
  <div class="mt-4 md:w-1/2">
    <div class="overflow-x-auto p-1 *:shrink-0 flex items-center flex-nowrap md:grid grid-cols-3 gap-2">
      {% for framework in config.raw.apitoolkit_supported_frameworks %}
        {% if framework.href %}
          <a href="{{ framework.href }}" class="h-36 w-36 p-4 border text-center shadow text-base font-normal rounded-lg md:p-2 flex just-center items-center integrate-btns">
            <span>{{ framework.title }}</span>
          </a>
        {% else %}
          <button
            class="integrate-btns h-36 w-36 md:w-full p-4 md:p-2 no-prose border shadow rounded-lg flex items-center justify-center {% if forloop.first %}ring{% endif %}" 
            id="{{ framework.id }}" title="{{ framework.title }}" xonclick="integrationTabs(event)"
            _="on click remove .ring from .integrate-btns then add .ring to me then put #{{framework.id}}_content.innerHTML into #integration_details_parent.innerHTML"
          >
            <img src="{{ framework.img_src }}" alt="{{ framework.alt }}" class="w-full" />
          </button>
        {% endif %}
      {% endfor %}
    </div>
    <a href="/docs/sdks" class="w-full btn btn-outline link link-hover mt-4">
    View All SDKs
    <i class="fa-regular fa-arrow-right mr-4"></i>
</a>
  </div>
  <div class="grow flex flex-col w-full m-0 py-0 text-left" id="integration_details_parent" _="init put #express_btn_content.innerHTML into me.innerHTML"></div>
</div>
```